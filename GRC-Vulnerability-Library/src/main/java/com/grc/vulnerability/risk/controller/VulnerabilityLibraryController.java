package com.grc.vulnerability.risk.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.lang.NonNull;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationDetails;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.grc.vulnerability.common.aspect.Loggable;
import com.grc.vulnerability.common.constants.VulnerabilityLibraryErrorConstants;
import com.grc.vulnerability.common.dto.LoginUserDetails;
import com.grc.vulnerability.common.response.VulnerabilityLibraryResponse;
import com.grc.vulnerability.common.response.VulnerabilityLibraryResponseEntity;
import com.grc.vulnerability.common.utils.ExcelHelper;
import com.grc.vulnerability.common.utils.MapperUtils;
import com.grc.vulnerability.risk.dto.VulnerabilityLibraryDTO;
import com.grc.vulnerability.risk.service.VulnerabilityLibraryService;

@RestController
@RequestMapping("/library")
public class VulnerabilityLibraryController {

	@Autowired
	private VulnerabilityLibraryService vulnerabilityLibService;

	private static final String READ_THREAT_ACTION = "READ-VULNERABILITY-LIBRARY-DETAILS";
	private static final String READ_ALL_THREAT_ACTION = "READ-ALL-VULNERABILITY-LIBRARY-DETAILS";
//	private static final String READ_LIST_THREAT_ACTION = "READ-LIST-VULNERABILITY-LIBRARY-DETAILS";
	private static final String BULK_THREAT_CREATION_ACTION = "BULK-VULNERABILITY-CREATION";
	private static final String THREAT_SAVE_ACTION = "SAVE-VULNERABILITY-LIBRARY-DETAILS";
	private static final String THREAT_EDIT_ACTION = "EDIT-VULNERABILITY-LIBRARY-DETAILS";
	private static final String THREAT_REMOVE_ACTION = "REMOVE-VULNERABILITY-LIBRARY-DETAILS";
	private static final String THREAT_REMOVE_LIST_ACTION = "REMOVE-VULNERABILITY-LIST-LIBRARY-DETAILS";

	@PreAuthorize("isAuthenticated()")
	@Loggable(action = READ_ALL_THREAT_ACTION)
	@PostMapping("/vulnerability/find/all")
	public ResponseEntity<?> getAllVulnerability(Authentication auth) {
		OAuth2AuthenticationDetails oAuth2AuthenticationDetails = (OAuth2AuthenticationDetails) auth.getDetails();
		@SuppressWarnings("unused")
		LoginUserDetails loginUserDetails = (LoginUserDetails) oAuth2AuthenticationDetails.getDecodedDetails();
		return VulnerabilityLibraryResponseEntity
				.success(MapperUtils.mapToTargetClass(vulnerabilityLibService.getAllVulnerability(), VulnerabilityLibraryDTO.class));
	}

	@PreAuthorize("isAuthenticated()")
	@Loggable(action = READ_THREAT_ACTION)
	@GetMapping("/vulnerability/find/{id}")
	public ResponseEntity<?> getVulnerabilitybyId(@NonNull @PathVariable(value = "id") long vulnerabilityId) {
		return VulnerabilityLibraryResponseEntity.success(
				MapperUtils.mapToTargetClass(vulnerabilityLibService.getVulnerabilityById(vulnerabilityId), VulnerabilityLibraryDTO.class));
	}
	
/*
	@PreAuthorize("isAuthenticated()")
	@Loggable(action = READ_LIST_THREAT_ACTION)
	@PostMapping("/krimap/activelist")
	public ResponseEntity<?> getActiveVulnerabilityByList(@NonNull @RequestBody VulnerabilityDetailsDTO vulnerabilityDetailsDTO) {
		// System.out.println(
		// "---------active-id-list------------size----->" +
		// (vulnerabilityDetailsDTO.getVulnerabilityIdList()).size());
		VulnerabilityDetailsDTO vulnerabilityDTO = new VulnerabilityDetailsDTO();
		vulnerabilityDTO
				.setVulnerabilityLibraryList(vulnerabilityLibService.getActiveVulnerabilityByList(vulnerabilityDetailsDTO.getVulnerabilityIdList()));
		return VulnerabilityLibraryResponseEntity.success(vulnerabilityDTO);
	}
*/
	
	@PreAuthorize("isAuthenticated()")
	@Loggable(action = BULK_THREAT_CREATION_ACTION)
	@PostMapping(value = "/vulnerability/bulk", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
	public ResponseEntity<VulnerabilityLibraryResponse<?>> bulkRiskUpload(Authentication auth,
			@NonNull @RequestPart MultipartFile file) {
		OAuth2AuthenticationDetails oAuth2AuthenticationDetails = (OAuth2AuthenticationDetails) auth.getDetails();
		LoginUserDetails loginUserDetails = (LoginUserDetails) oAuth2AuthenticationDetails.getDecodedDetails();
		String uname = loginUserDetails.getUsername();

		if (!ExcelHelper.hasExcelFormat(file)) {
			return VulnerabilityLibraryResponseEntity
					.failure(new VulnerabilityLibraryResponse<>(VulnerabilityLibraryErrorConstants.FAILED,
							VulnerabilityLibraryErrorConstants.INVALID_EXCEL_FILE_FORMAT), HttpStatus.BAD_REQUEST);
		}
		return VulnerabilityLibraryResponseEntity.success(vulnerabilityLibService.bulkVulnerabilityCreation(file, uname));
	}

	@PreAuthorize("isAuthenticated()")
	@Loggable(action = THREAT_SAVE_ACTION)
	@PostMapping("/vulnerability/new")
	public ResponseEntity<?> creatVulnerability(Authentication auth, @NonNull @RequestBody VulnerabilityLibraryDTO vulnerabilityLibrary) {
		OAuth2AuthenticationDetails oAuth2AuthenticationDetails = (OAuth2AuthenticationDetails) auth.getDetails();
		LoginUserDetails loginUserDetails = (LoginUserDetails) oAuth2AuthenticationDetails.getDecodedDetails();
		vulnerabilityLibrary.setCreatedBy(loginUserDetails.getUsername());
		return VulnerabilityLibraryResponseEntity.success(
				MapperUtils.mapToTargetClass(vulnerabilityLibService.createVulnerability(vulnerabilityLibrary), VulnerabilityLibraryDTO.class));
	}

	@PreAuthorize("isAuthenticated()")
	@Loggable(action = THREAT_EDIT_ACTION)
	@PutMapping("/vulnerability/modify")
	public ResponseEntity<?> updateVulnerability(Authentication auth,
			@NonNull @RequestBody VulnerabilityLibraryDTO vulnerabilityLibrary) {
		OAuth2AuthenticationDetails oAuth2AuthenticationDetails = (OAuth2AuthenticationDetails) auth.getDetails();
		LoginUserDetails loginUserDetails = (LoginUserDetails) oAuth2AuthenticationDetails.getDecodedDetails();
		vulnerabilityLibrary.setModifiedBy(loginUserDetails.getUsername());
		return VulnerabilityLibraryResponseEntity.success(
				MapperUtils.mapToTargetClass(vulnerabilityLibService.updateVulnerability(vulnerabilityLibrary), VulnerabilityLibraryDTO.class));
	}

	@PreAuthorize("isAuthenticated()")
	@Loggable(action = THREAT_REMOVE_ACTION)
	@PutMapping("/vulnerability/remove")
	public ResponseEntity<?> deleteVulnerability(Authentication auth,
			@NonNull @RequestBody VulnerabilityLibraryDTO vulnerabilityLibrary) {
		OAuth2AuthenticationDetails oAuth2AuthenticationDetails = (OAuth2AuthenticationDetails) auth.getDetails();
		LoginUserDetails loginUserDetails = (LoginUserDetails) oAuth2AuthenticationDetails.getDecodedDetails();
		vulnerabilityLibrary.setModifiedBy(loginUserDetails.getUsername());
		return VulnerabilityLibraryResponseEntity.success(
				MapperUtils.mapToTargetClass(vulnerabilityLibService.deleteVulnerability(vulnerabilityLibrary), VulnerabilityLibraryDTO.class));
	}

	@PreAuthorize("isAuthenticated()")
	@Loggable(action = THREAT_REMOVE_LIST_ACTION)
	@PutMapping("/vulnerability/remove/list")
	public ResponseEntity<?> deleteVulnerabilityList(Authentication auth,
			@NonNull @RequestBody List<VulnerabilityLibraryDTO> vulnerabilityLibraryList) {
		OAuth2AuthenticationDetails oAuth2AuthenticationDetails = (OAuth2AuthenticationDetails) auth.getDetails();
		LoginUserDetails loginUserDetails = (LoginUserDetails) oAuth2AuthenticationDetails.getDecodedDetails();
		// vulnerabilityLibrary.setModifiedBy(loginUserDetails.getUsername());
		return VulnerabilityLibraryResponseEntity
				.success(vulnerabilityLibService.deleteVulnerabilityList(vulnerabilityLibraryList, loginUserDetails.getUsername()));
	}
}
