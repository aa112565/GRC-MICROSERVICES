package com.grc.vulnerability.risk.controller;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.lang.NonNull;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationDetails;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.grc.vulnerability.common.aspect.Loggable;
import com.grc.vulnerability.common.dto.LoginUserDetails;
import com.grc.vulnerability.common.response.VulnerabilityLibraryResponseEntity;
import com.grc.vulnerability.common.utils.MapperUtils;
import com.grc.vulnerability.risk.dto.VulnerabilityDetailsDTO;
import com.grc.vulnerability.risk.dto.VulnerabilityIdPreferenceDTO;
import com.grc.vulnerability.risk.service.VulnerabilityIdPreferenceService;




@RestController
public class VulnerabilityIdPreferenceController {

	@Autowired
	private VulnerabilityIdPreferenceService idPreferenceService;


	private static final String SAVE_OR_EDIT_ACTION = "SAVE-OR-EDIT-VULNERABILITY-ID-PREFERENCE-DETAILS";
	private static final String READ_ACTION = "READ-VULNERABILITY-ID-PREFERENCE-DETAILS";
	private static final String READ_ALL_ACTION = "READ-ALL-VULNERABILITY-ID-PREFERENCE-DETAILS";


	@PreAuthorize("isAuthenticated()")
	@Loggable(action = READ_ALL_ACTION)
	@GetMapping("/vulnerability/id/preference/find/all")
	public ResponseEntity<?> getAllVulnerabilityIdPreference() {
		return VulnerabilityLibraryResponseEntity
				.success(MapperUtils.mapToTargetClass(idPreferenceService.getAllVulnerabilityIdPreferenceByActiveflag(), VulnerabilityIdPreferenceDTO.class));
	}

	@PreAuthorize("isAuthenticated()")
	@Loggable(action = READ_ACTION)
	@GetMapping("/vulnerability/id/preference/find/{id}")
	public VulnerabilityDetailsDTO getVulnerabilityIdPreferenceById(@NonNull @PathVariable(value = "id") long seriesId) {
		VulnerabilityDetailsDTO resDto = new VulnerabilityDetailsDTO();
		VulnerabilityIdPreferenceDTO preferenceDto = MapperUtils.mapToTargetClass(idPreferenceService.getVulnerabilityIdPreferenceById(seriesId), VulnerabilityIdPreferenceDTO.class);
		resDto.setIdPreferenceDto(preferenceDto);	
		return resDto;
	}
	
	@PreAuthorize("isAuthenticated()")
	@Loggable(action = READ_ACTION)
	@PostMapping("/vulnerability/id/preference/find/new")
	public ResponseEntity<?> getVulnerabilityIdPreferenceNew(@NonNull @RequestBody VulnerabilityIdPreferenceDTO preferenceDto) {
	//	VulnerabilityDetailsDTO resDto = new VulnerabilityDetailsDTO();
	//	VulnerabilityIdPreferenceDTO preferenceDto = MapperUtils.mapToTargetClass(idPreferenceService.getVulnerabilityIdPreferenceById(seriesId), VulnerabilityIdPreferenceDTO.class);
	//	resDto.setIdPreferenceDto(preferenceDto);	
		return VulnerabilityLibraryResponseEntity
				.success(idPreferenceService.findNewIdPreference(preferenceDto));
	}


	@PreAuthorize("isAuthenticated()")
	@Loggable(action = SAVE_OR_EDIT_ACTION)
	@PostMapping("/vulnerability/id/preference/new")
	public ResponseEntity<?> createVulnerabilityIdPreference(Authentication auth, @NonNull @RequestBody VulnerabilityIdPreferenceDTO preferenceDto) {
		OAuth2AuthenticationDetails oAuth2AuthenticationDetails = (OAuth2AuthenticationDetails) auth.getDetails();
		LoginUserDetails loginUserDetails = (LoginUserDetails) oAuth2AuthenticationDetails.getDecodedDetails();

		return VulnerabilityLibraryResponseEntity
				.success(MapperUtils.mapToTargetClass(idPreferenceService.createVulnerabilityIdPreference(preferenceDto, loginUserDetails.getUsername()), VulnerabilityIdPreferenceDTO.class));
	}

	@PreAuthorize("isAuthenticated()")
	@Loggable(action = SAVE_OR_EDIT_ACTION)
	@PutMapping("/vulnerability/id/preference/modify")
	public ResponseEntity<?> updateVulnerabilityIdPreference(Authentication auth, @NonNull @RequestBody VulnerabilityIdPreferenceDTO preferenceDto) {
		OAuth2AuthenticationDetails oAuth2AuthenticationDetails = (OAuth2AuthenticationDetails) auth.getDetails();
		LoginUserDetails loginUserDetails = (LoginUserDetails) oAuth2AuthenticationDetails.getDecodedDetails();
	
		return VulnerabilityLibraryResponseEntity
				.success(MapperUtils.mapToTargetClass(idPreferenceService.updateVulnerabilityIdPreference(preferenceDto, loginUserDetails.getUsername()), VulnerabilityIdPreferenceDTO.class));
	}

	@PreAuthorize("isAuthenticated()")
	@Loggable(action = SAVE_OR_EDIT_ACTION)
	@PutMapping("/vulnerability/id/preference/remove")
	public ResponseEntity<?> deleteVulnerabilityIdPreference(Authentication auth, @NonNull @RequestBody VulnerabilityIdPreferenceDTO preferenceDto) {
		OAuth2AuthenticationDetails oAuth2AuthenticationDetails = (OAuth2AuthenticationDetails) auth.getDetails();
		LoginUserDetails loginUserDetails = (LoginUserDetails) oAuth2AuthenticationDetails.getDecodedDetails();
	
		return VulnerabilityLibraryResponseEntity
				.success(MapperUtils.mapToTargetClass(idPreferenceService.deleteVulnerabilityIdPreference(preferenceDto, loginUserDetails.getUsername()), VulnerabilityIdPreferenceDTO.class));
	}

	
}
